const db = require('../models/db');

exports.getAsistencias = async (req, res) => {
  try {
    const { fechaInicio, fechaFin, nivel, grado, curso } = req.query;

    const filtros = [];
    const valores = [];

    let fechaInicioValida = fechaInicio;
    let fechaFinValida = fechaFin;

    if (fechaInicio && fechaFin && fechaInicio > fechaFin) {
      [fechaInicioValida, fechaFinValida] = [fechaFin, fechaInicio];
    }

    if (fechaInicioValida && fechaFinValida) {
      filtros.push("DATE(a.fecha) >= ? AND DATE(a.fecha) <= ?");
      valores.push(fechaInicioValida, fechaFinValida);
    } else {
      const fechaFinDefault = new Date();
      const fechaInicioDefault = new Date();
      fechaInicioDefault.setDate(fechaInicioDefault.getDate() - 30);
      
      const fechaInicioStr = fechaInicioDefault.toISOString().split('T')[0];
      const fechaFinStr = fechaFinDefault.toISOString().split('T')[0];
      
      filtros.push("DATE(a.fecha) >= ? AND DATE(a.fecha) <= ?");
      valores.push(fechaInicioStr, fechaFinStr);
    }

    // FILTRO PARA EXCLUIR NIVELES DE TRANSICI칍N
    filtros.push("c.descripcion NOT LIKE '%Transici칩n%'");

    if (nivel && nivel !== '' && nivel !== 'todos') {
      const nivelMap = {
        'parvularia': ['Prek칤nder', 'K칤nder'],
        'basica': ['1춿 B치sico', '2춿 B치sico', '3춿 B치sico', '4춿 B치sico', '5춿 B치sico', '6춿 B치sico', '7춿 B치sico', '8춿 B치sico'],
        'media': ['1춿 Medio', '2춿 Medio', '3춿 Medio', '4춿 Medio']
      };
      
      const nivelesPermitidos = nivelMap[nivel.toLowerCase()] || [nivel];
      
      if (nivelesPermitidos.length > 0) {
        const placeholders = nivelesPermitidos.map(() => 'c.descripcion LIKE ?').join(' OR ');
        filtros.push(`(${placeholders})`);
        nivelesPermitidos.forEach(nivelPermitido => {
          valores.push(`%${nivelPermitido}%`);
        });
      }
    }

    if (grado && grado !== '' && grado !== 'todos') {
      filtros.push("c.descripcion = ?");
      valores.push(grado);
    }
    
    if (curso && curso !== '' && curso !== 'todos') {
      filtros.push("c.letra = ?");
      valores.push(curso);
    }

    const whereClause = filtros.length ? 'WHERE ' + filtros.join(' AND ') : '';

    const [rows] = await db.query(`
      SELECT 
        a.id_asistencia,
        e.id AS id_estudiante,
        e.run,
        CONCAT(e.nombres,' ',e.apellido_paterno,' ',e.apellido_materno) AS nombre_completo,
        c.nivel,
        c.letra,
        c.descripcion AS curso,
        DATE(a.fecha) AS fecha,
        a.hora,
        a.tipo_registro,
        a.presente
      FROM asistencias a
      INNER JOIN estudiantes2 e ON a.id_estudiante = e.id
      INNER JOIN cursos c ON e.curso_id = c.id
      ${whereClause}
      ORDER BY a.fecha DESC, a.hora DESC
      LIMIT 5000
    `, valores);

    res.json({ 
      success: true, 
      asistencias: rows.map(r => ({ 
        ...r, 
        presente: Number(r.presente),
        nombre_completo: r.nombre_completo || `${r.nombres || ''} ${r.apellido_paterno || ''} ${r.apellido_materno || ''}`.trim()
      })),
      total: rows.length
    });

  } catch (err) {
    res.status(500).json({ 
      success: false, 
      message: 'Error al obtener asistencias: ' + err.message 
    });
  }
};

exports.getFechasAsistencia = async (req, res) => {
  try {
    const [rows] = await db.query(
      `SELECT DISTINCT DATE(fecha) AS fecha, COUNT(*) as total
       FROM asistencias a
       INNER JOIN estudiantes2 e ON a.id_estudiante = e.id
       INNER JOIN cursos c ON e.curso_id = c.id
       WHERE fecha <= CURDATE() AND c.descripcion NOT LIKE '%Transici칩n%'
       GROUP BY DATE(fecha)
       ORDER BY fecha DESC 
       LIMIT 60`
    );
    
    const fechas = rows.map(r => ({
      fecha: r.fecha,
      total: r.total
    }));
    
    res.json(fechas.map(f => f.fecha));
  } catch (err) { 
    res.json([]); 
  }
};

exports.getCursosDisponibles = async (req, res) => {
  try {
    const [rows] = await db.query(
      `SELECT DISTINCT nivel, letra, descripcion 
       FROM cursos 
       WHERE descripcion NOT LIKE '%Transici칩n%'
       ORDER BY 
         CASE 
           WHEN nivel = 'Parvularia' THEN 1
           WHEN nivel = 'B치sica' THEN 2
           WHEN nivel = 'Media' THEN 3
           ELSE 4
         END,
         letra`
    );
    
    const cursos = rows.map(r => ({ 
      nivel: r.nivel, 
      letra: r.letra, 
      descripcion: r.descripcion 
    }));
    
    res.json(cursos);
  } catch (err) { 
    res.json([]); 
  }
};

exports.getGradosDisponibles = async (req, res) => {
  try {
    const [rows] = await db.query(
      `SELECT DISTINCT descripcion 
       FROM cursos 
       WHERE descripcion NOT LIKE '%Transici칩n%'
       ORDER BY 
         CASE 
           WHEN descripcion LIKE 'Prek%' THEN 1
           WHEN descripcion LIKE 'K%' THEN 2
           WHEN descripcion LIKE '%B치sico%' THEN 3
           WHEN descripcion LIKE '%Medio%' THEN 4
           ELSE 5
         END,
         descripcion`
    );
    
    const grados = rows.map(r => r.descripcion);
    
    // Filtrar para eliminar duplicados y asegurar consistencia
    const gradosUnicos = [...new Set(grados)].filter(grado => 
      grado && !grado.includes('Transici칩n')
    );
    
    res.json(gradosUnicos);
  } catch (err) { 
    // Si hay error, devolver lista por defecto consistente
    const gradosPorDefecto = [
      'Prek칤nder A',
      'Prek칤nder B', 
      'Kinder A',
      'Kinder B',
      '1춿 B치sico A',
      '1춿 B치sico B',
      '2춿 B치sico A',
      '2춿 B치sico B',
      '3춿 B치sico A',
      '3춿 B치sico B',
      '4춿 B치sico A',
      '4춿 B치sico B',
      '5춿 B치sico A',
      '5춿 B치sico B',
      '6춿 B치sico A',
      '6춿 B치sico B',
      '7춿 B치sico A',
      '7춿 B치sico B',
      '8춿 B치sico A'
    ];
    res.json(gradosPorDefecto);
  }
};

exports.getNivelesDisponibles = async (req, res) => {
  try {
    const [rows] = await db.query(
      `SELECT DISTINCT nivel FROM cursos WHERE descripcion NOT LIKE '%Transici칩n%' ORDER BY nivel`
    );
    
    const niveles = rows.map(r => r.nivel);
    res.json(niveles);
  } catch (err) { 
    res.json([]); 
  }
};

exports.getResumenAsistencias = async (req, res) => {
  try {
    const { fechaInicio, fechaFin, nivel, grado, curso } = req.query;

    if (!fechaInicio || !fechaFin) {
      return res.status(400).json({ 
        success: false, 
        message: 'Se requieren fechaInicio y fechaFin' 
      });
    }

    let fechaInicioValida = fechaInicio;
    let fechaFinValida = fechaFin;

    if (fechaInicio > fechaFin) {
      [fechaInicioValida, fechaFinValida] = [fechaFin, fechaInicio];
    }

    const filtros = [];
    const valores = [fechaInicioValida, fechaFinValida];

    // FILTRO PARA EXCLUIR NIVELES DE TRANSICI칍N
    filtros.push("c.descripcion NOT LIKE '%Transici칩n%'");

    if (nivel && nivel !== '' && nivel !== 'todos') {
      const nivelMap = {
        'parvularia': ['Prek칤nder', 'K칤nder'],
        'basica': ['1춿 B치sico', '2춿 B치sico', '3춿 B치sico', '4춿 B치sico', '5춿 B치sico', '6춿 B치sico', '7춿 B치sico', '8춿 B치sico'],
        'media': ['1춿 Medio', '2춿 Medio', '3춿 Medio', '4춿 Medio']
      };
      
      const nivelesPermitidos = nivelMap[nivel.toLowerCase()] || [nivel];
      
      if (nivelesPermitidos.length > 0) {
        const placeholders = nivelesPermitidos.map(() => 'c.descripcion LIKE ?').join(' OR ');
        filtros.push(`(${placeholders})`);
        nivelesPermitidos.forEach(nivelPermitido => {
          valores.push(`%${nivelPermitido}%`);
        });
      }
    }

    if (grado && grado !== '' && grado !== 'todos') {
      filtros.push("c.descripcion = ?");
      valores.push(grado);
    }
    
    if (curso && curso !== '' && curso !== 'todos') {
      filtros.push("c.letra = ?");
      valores.push(curso);
    }

    const whereClause = filtros.length ? 'AND ' + filtros.join(' AND ') : '';

    const [asistencias] = await db.query(`
      SELECT 
        DATE(a.fecha) AS fecha,
        SUM(CASE WHEN a.presente = 1 THEN 1 ELSE 0 END) AS asistencias,
        SUM(CASE WHEN a.presente = 0 THEN 1 ELSE 0 END) AS faltas
      FROM asistencias a
      INNER JOIN estudiantes2 e ON a.id_estudiante = e.id
      INNER JOIN cursos c ON e.curso_id = c.id
      WHERE DATE(a.fecha) >= ? AND DATE(a.fecha) <= ?
      ${whereClause}
      GROUP BY DATE(a.fecha)
      ORDER BY fecha
    `, valores);

    let tablaHTML = '';
    
    if (asistencias.length === 0) {
      tablaHTML = `
        <tr>
          <td colspan="4" style="text-align:center; padding: 20px; color: #666;">
            游늵 No hay datos de asistencia para el rango de fechas seleccionado
          </td>
        </tr>
      `;
    } else {
      asistencias.forEach(dia => {
        const asistenciasNum = parseInt(dia.asistencias) || 0;
        const faltasNum = parseInt(dia.faltas) || 0;
        const total = asistenciasNum + faltasNum;
        const porcentaje = total > 0 ? ((asistenciasNum / total) * 100) : 0;
        
        const fecha = new Date(dia.fecha);
        const fechaFormateada = fecha.toLocaleDateString('es-CL');
        
        const filaStyle = porcentaje < 50 ? 'style="background-color: #ffebee;"' : '';
        
        tablaHTML += `
          <tr ${filaStyle}>
            <td>${fechaFormateada}</td>
            <td>${asistenciasNum.toLocaleString()}</td>
            <td>${faltasNum.toLocaleString()}</td>
            <td><strong>${Math.round(porcentaje * 10) / 10}%</strong></td>
          </tr>
        `;
      });
    }

    res.json({ 
      success: true, 
      tablaHTML: tablaHTML,
      totalDias: asistencias.length
    });

  } catch (err) {
    res.status(500).json({ 
      success: false, 
      message: 'Error al generar resumen: ' + err.message 
    });
  }
};

exports.getAlumnosCriticos = async (req, res) => {
  try {
    const { fechaInicio, fechaFin, nivel, grado, curso } = req.query;

    if (!fechaInicio || !fechaFin) {
      return res.status(400).json({ 
        success: false, 
        message: 'Se requieren fechaInicio y fechaFin' 
      });
    }

    const filtros = [];
    const valores = [fechaInicio, fechaFin];

    // FILTRO PARA EXCLUIR NIVELES DE TRANSICI칍N
    filtros.push("c.descripcion NOT LIKE '%Transici칩n%'");

    if (nivel && nivel !== '' && nivel !== 'todos') {
      const nivelMap = {
        'parvularia': ['Prek칤nder', 'K칤nder'],
        'basica': ['1춿 B치sico', '2춿 B치sico', '3춿 B치sico', '4춿 B치sico', '5춿 B치sico', '6춿 B치sico', '7춿 B치sico', '8춿 B치sico'],
        'media': ['1춿 Medio', '2춿 Medio', '3춿 Medio', '4춿 Medio']
      };
      
      const nivelesPermitidos = nivelMap[nivel.toLowerCase()] || [nivel];
      
      if (nivelesPermitidos.length > 0) {
        const placeholders = nivelesPermitidos.map(() => 'c.descripcion LIKE ?').join(' OR ');
        filtros.push(`(${placeholders})`);
        nivelesPermitidos.forEach(nivelPermitido => {
          valores.push(`%${nivelPermitido}%`);
        });
      }
    }

    if (grado && grado !== '' && grado !== 'todos') {
      filtros.push("c.descripcion = ?");
      valores.push(grado);
    }
    
    if (curso && curso !== '' && curso !== 'todos') {
      filtros.push("c.letra = ?");
      valores.push(curso);
    }

    const whereClause = filtros.length ? 'AND ' + filtros.join(' AND ') : '';

    const [alumnos] = await db.query(`
      SELECT 
        e.id,
        e.run,
        CONCAT(e.nombres, ' ', e.apellido_paterno, ' ', e.apellido_materno) AS nombre_completo,
        c.descripcion AS curso,
        COUNT(*) AS total_registros,
        SUM(CASE WHEN a.presente = 1 THEN 1 ELSE 0 END) AS asistencias,
        SUM(CASE WHEN a.presente = 0 THEN 1 ELSE 0 END) AS faltas,
        CASE 
          WHEN COUNT(*) > 0 THEN 
            ROUND((SUM(CASE WHEN a.presente = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100, 1)
          ELSE 0 
        END AS porcentaje_asistencia
      FROM estudiantes2 e
      INNER JOIN asistencias a ON e.id = a.id_estudiante
      INNER JOIN cursos c ON e.curso_id = c.id
      WHERE DATE(a.fecha) >= ? AND DATE(a.fecha) <= ?
      ${whereClause}
      GROUP BY e.id, e.run, e.nombres, e.apellido_paterno, e.apellido_materno, c.descripcion
      HAVING porcentaje_asistencia < 50 AND total_registros >= 3
      ORDER BY porcentaje_asistencia ASC
      LIMIT 100
    `, valores);

    const alumnosFormateados = alumnos.map(alumno => ({
      id: alumno.id,
      run: alumno.run,
      nombre_completo: alumno.nombre_completo,
      curso: alumno.curso,
      asistencias: parseInt(alumno.asistencias) || 0,
      faltas: parseInt(alumno.faltas) || 0,
      total_registros: parseInt(alumno.total_registros) || 0,
      porcentaje_asistencia: parseFloat(alumno.porcentaje_asistencia) || 0
    }));

    res.json({ 
      success: true, 
      alumnosCriticos: alumnosFormateados,
      total: alumnosFormateados.length
    });

  } catch (err) {
    res.status(500).json({ 
      success: false, 
      message: 'Error al obtener alumnos cr칤ticos: ' + err.message 
    });
  }
};