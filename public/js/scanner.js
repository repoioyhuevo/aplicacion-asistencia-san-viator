const barcodeInput = document.getElementById('barcodeInput');
const resultDiv = document.getElementById('result');

// Diagnosticar el elemento
console.log('üîç DIAGN√ìSTICO INICIAL:');
console.log('üîç barcodeInput encontrado:', barcodeInput);
console.log('üîç barcodeInput value:', barcodeInput ? barcodeInput.value : 'NO EXISTE');
console.log('üîç barcodeInput id:', barcodeInput ? barcodeInput.id : 'NO EXISTE');

// Agregar TODOS los eventos posibles para capturar el c√≥digo
barcodeInput.addEventListener('input', function(e) {
    console.log('üéØ EVENTO INPUT CAPTURADO:', this.value);
    console.log('üéØ Evento completo:', e);
});

barcodeInput.addEventListener('change', function(e) {
    console.log('üéØ EVENTO CHANGE CAPTURADO:', this.value);
});

barcodeInput.addEventListener('keydown', function(e) {
    console.log('üéØ EVENTO KEYDOWN:', e.key, 'C√≥digo:', e.keyCode);
});

barcodeInput.addEventListener('keyup', function(e) {
    console.log('üéØ EVENTO KEYUP:', e.key, 'Valor:', this.value);
});

barcodeInput.addEventListener('keypress', function(e) {
    console.log('üéØ EVENTO KEYPRESS:', e.key);
});

// Verificar si el lector agrega un Enter al final
barcodeInput.addEventListener('input', function(e) {
    const value = this.value;
    console.log('üì¶ Valor completo:', value);
    console.log('üì¶ Longitud:', value.length);
    console.log('üì¶ Caracteres:', Array.from(value).map(c => c.charCodeAt(0)));
    
    // Si el valor tiene un Enter al final, procesarlo
    if (value.includes('\n') || value.includes('\r')) {
        console.log('üîî ENTER DETECTADO - Procesando c√≥digo...');
        this.value = value.replace(/[\n\r]/g, ''); // Limpiar Enter
        procesarCodigo(this.value);
    }
});

// Funci√≥n separada para procesar
async function procesarCodigo(codigo) {
    console.log('üöÄ INICIANDO PROCESAMIENTO:', codigo);
    
    if (!codigo) {
        console.log('‚ùå C√≥digo vac√≠o');
        return;
    }

    try {
        console.log('üåê Enviando al servidor...');
        const response = await fetch('/api/barcode/registrar-asistencia', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ codigoBarras: codigo })
        });

        console.log('üì° Respuesta recibida, status:', response.status);
        const data = await response.json();
        console.log('üìä Datos recibidos:', data);
        
    } catch (error) {
        console.error('üí• Error:', error);
    }
}

// Tambi√©n probar con un timeout autom√°tico (por si el lector no env√≠a Enter)
let timeoutId;
barcodeInput.addEventListener('input', function() {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
        const value = this.value.trim();
        if (value.length > 3) { // M√≠nimo 3 caracteres para ser un c√≥digo v√°lido
            console.log('‚è∞ TIMEOUT - Procesando c√≥digo autom√°ticamente:', value);
            procesarCodigo(value);
        }
    }, 500); // Esperar 500ms despu√©s del √∫ltimo input
});

console.log('‚úÖ Diagn√≥stico cargado - Escanea un c√≥digo ahora');